package com.mpokket.testgenerator.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.api.io.TempDir;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.JsonProcessingException;
import org.mockito.ArgumentCaptor;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.ArgumentMatchers.isNull;
import static org.mockito.Mockito.*;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Map;
import java.util.HashMap;

@ExtendWith(MockitoExtension.class)
public class DeepSeekCoderServiceTest {

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private DeepSeekCoderService deepSeekCoderService;

    @TempDir
    Path tempDir;
    
    // ObjectMapper is often a real object or a spy, not a pure mock.
    private ObjectMapper objectMapper = new ObjectMapper();

    @BeforeEach
    public void setUp() {
        // Use ReflectionTestUtils to manually inject @Value fields and other tricky dependencies.
        // This setup is generated by the script to ensure correctness.
        ReflectionTestUtils.setField(deepSeekCoderService, "timeoutSeconds", 180);
        ReflectionTestUtils.setField(deepSeekCoderService, "maxRetries", 3);
        ReflectionTestUtils.setField(deepSeekCoderService, "primaryModel", "deepseek-v2");
        ReflectionTestUtils.setField(deepSeekCoderService, "autoModelSelection", true);
        // Manually inject a real ObjectMapper instance to avoid mocking issues.
        ReflectionTestUtils.setField(deepSeekCoderService, "objectMapper", new ObjectMapper());
    }

    @Test
        public void testIsModelReady_Success() {
            String healthUrl = "http://example.com/health";
            ResponseEntity<String> response = new ResponseEntity<>("{\"models\": {\"deepseek-v2\": {\"status\": \"available\"}}}", HttpStatus.OK);
            when(restTemplate.getForEntity(healthUrl, String.class)).thenReturn(response);
    
            assertTrue(deepSeekCoderService.isModelReady());
            verify(restTemplate).getForEntity(healthUrl, String.class);
        }
    @Test
        public void testIsModelReady_Failure() {
            String healthUrl = "http://example.com/health";
            ResponseEntity<String> response = new ResponseEntity<>("{\"models\": {\"deepseek-v2\": {\"status\": \"unavailable\"}}}", HttpStatus.OK);
            when(restTemplate.getForEntity(healthUrl, String.class)).thenReturn(response);
    
            assertFalse(deepSeekCoderService.isModelReady());
            verify(restTemplate).getForEntity(healthUrl, String.class);
        }
    @Test
        public void testInitializeModel_Success() throws IOException {
            String initUrl = "http://example.com/initialize-model";
            Map<String, Object> requestBody = new HashMap<>();
            requestBody.put("model_path", "/home/adminuser/models/deepseek-coder-6.7b-instruct.Q4_K_M.gguf");
            requestBody.put("use_gpu", true);
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);
            ResponseEntity<String> response = new ResponseEntity<>("{\"status\": \"success\", \"deepseek_v2_available\": true, \"deepseek_loaded\": true}", HttpStatus.OK);
            when(restTemplate.postForEntity(initUrl, request, String.class)).thenReturn(response);
    
            assertTrue(deepSeekCoderService.initializeModel());
            verify(restTemplate).postForEntity(initUrl, request, String.class);
        }
    @Test
        public void testInitializeModel_Failure() throws IOException {
            String initUrl = "http://example.com/initialize-model";
            Map<String, Object> requestBody = new HashMap<>();
            requestBody.put("model_path", "/home/adminuser/models/deepseek-coder-6.7b-instruct.Q4_K_M.gguf");
            requestBody.put("use_gpu", true);
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);
            ResponseEntity<String> response = new ResponseEntity<>("{\"status\": \"failure\"}", HttpStatus.OK);
            when(restTemplate.postForEntity(initUrl, request, String.class)).thenReturn(response);
    
            assertFalse(deepSeekCoderService.initializeModel());
            verify(restTemplate).postForEntity(initUrl, request, String.class);
        }
    @Test
        public void testGetSystemStatus_Success() {
            String statusUrl = "http://example.com/system-status";
            ResponseEntity<String> response = new ResponseEntity<>("{\"server\": \"AWS g5.2xlarge\", \"total_memory_gb\": 32.0, \"available_memory_gb\": 28.0, \"memory_percent\": 87.5, \"cpu_percent\": 78.9, \"model_loaded\": true, \"cache_size\": 1024}", HttpStatus.OK);
            when(restTemplate.getForEntity(statusUrl, String.class)).thenReturn(response);
    
            Map<String, Object> status = deepSeekCoderService.getSystemStatus();
            assertEquals("AWS g5.2xlarge", status.get("server"));
            assertEquals(32.0, status.get("total_memory_gb"));
            assertEquals(28.0, status.get("available_memory_gb"));
            assertEquals(87.5, status.get("memory_percent"));
            assertEquals(78.9, status.get("cpu_percent"));
            assertTrue((boolean) status.get("model_loaded"));
            assertEquals(1024, status.get("cache_size"));
        }
//    @Test
//        public void testGetSystemStatus_Error() {
//            String statusUrl = "http://example.com/system-status";
//            when(restTemplate.getForEntity(statusUrl, String.class)).thenThrow(new HttpServerErrorException(HttpServerErrorException.ServerErrorStatus));
//
//            Map<String, Object> status = deepSeekCoderService.getSystemStatus();
//            assertEquals("Unable to connect to Deepseek-V2 server", status.get("error"));
//        }
    @Test
        public void testGenerateTestCases_Success() {
            String javaCode = "public class SampleClass {\n" +
                    "    public int sampleMethod(int a, int b) {\n" +
                    "        return a + b;\n" +
                    "    }\n" +
                    "}";
            String className = "SampleClass";
        }
//    @Test
//        void testGenerateTestCases_HappyPath() {
//            String javaCode = "public class SampleTest { public void sampleMethod() {} }";
//            String className = "SampleTest";
//            String modelType = "deepseek-v2";
//            when(restTemplate.postForEntity(any(), any(HttpEntity.class), eq(String.class))).thenReturn(new ResponseEntity<>("{}", HttpStatus.OK));
//            when(objectMapper.readTree(any())).thenReturn(mock(JsonNode.class));
//            String result = deepSeekCoderService.generateTestCases(javaCode, className, modelType);
//            assertNotNull(result);
//            verify(restTemplate, times(1)).postForEntity(any(), any(HttpEntity.class), eq(String.class));
//            verify(objectMapper, times(1)).readTree(any());
//        }
    @Test
        void testGenerateTestCases_RetryOnError() {
            String javaCode = "public class SampleTest { public void sampleMethod() {} }";
            String className = "SampleTest";
            String modelType = "deepseek-v2";
            when(restTemplate.postForEntity(any(), any(HttpEntity.class), eq(String.class))).thenReturn(new ResponseEntity<>("{}", HttpStatus.INTERNAL_SERVER_ERROR)).thenThrow(new RuntimeException("Server error"));
            assertThrows(RuntimeException.class, () -> deepSeekCoderService.generateTestCases(javaCode, className, modelType));
            verify(restTemplate, times(3)).postForEntity(any(), any(HttpEntity.class), eq(String.class));
        }
    @Test
        void testTestDeepSeekV2Connection_Success() {
            String serverUrl = "http://localhost:8080";
            when(restTemplate.postForEntity(eq(serverUrl + "/test-deepseek-v2"), any(), eq(String.class))).thenReturn(new ResponseEntity<>("{}", HttpStatus.OK));
            Map<String, Object> result = deepSeekCoderService.testDeepSeekV2Connection();
            assertEquals("deepseek-v2", result.get("model"));
            verify(restTemplate, times(1)).postForEntity(eq(serverUrl + "/test-deepseek-v2"), any(), eq(String.class));
        }
    @Test
        void testTestDeepSeekV2Connection_Failure() {
            String serverUrl = "http://localhost:8080";
            when(restTemplate.postForEntity(eq(serverUrl + "/test-deepseek-v2"), any(), eq(String.class))).thenReturn(new ResponseEntity<>("{}", HttpStatus.INTERNAL_SERVER_ERROR));
            Map<String, Object> result = deepSeekCoderService.testDeepSeekV2Connection();
            assertEquals("error", result.get("status"));
            verify(restTemplate, times(1)).postForEntity(eq(serverUrl + "/test-deepseek-v2"), any(), eq(String.class));
        }
//    @Test
//        void testGetModelsStatus_Success() {
//            String serverUrl = "http://localhost:8080";
//            when(restTemplate.getForEntity(eq(serverUrl + "/models/status"), eq(String.class))).thenReturn(new ResponseEntity<>("{}", HttpStatus.OK));
//            when(objectMapper.readTree(any())).thenReturn(mock(JsonNode.class));
//            Map<String, Object> result = deepSeekCoderService.getModelsStatus();
//            assertTrue((Boolean) result.get("deepseek_v2_available"));
//            verify(restTemplate, times(1)).getForEntity(eq(serverUrl + "/models/status"), eq(String.class));
//            verify(objectMapper, times(1)).readTree(any());
//        }
    @Test
        void testGetModelsStatus_Failure() {
            String serverUrl = "http://localhost:8080";
            when(restTemplate.getForEntity(eq(serverUrl + "/models/status"), eq(String.class))).thenReturn(new ResponseEntity<>("{}", HttpStatus.INTERNAL_SERVER_ERROR));
            Map<String, Object> result = deepSeekCoderService.getModelsStatus();
            assertEquals("Unable to get models status", result.get("error"));
            verify(restTemplate, times(1)).getForEntity(eq(serverUrl + "/models/status"), eq(String.class));
        }
    @Test
        void testClearCache_Success() {
            String serverUrl = "http://localhost:8080";
            String clearCacheUrl = serverUrl + "/clear-cache";
            when(restTemplate.postForEntity(eq(clearCacheUrl), any(), eq(String.class))).thenReturn(new ResponseEntity<>("OK", HttpStatus.OK));
    
            boolean result = deepSeekCoderService.clearCache();
    
            assertTrue(result);
            verify(restTemplate, times(1)).postForEntity(eq(clearCacheUrl), any(), eq(String.class));
        }
    @Test
        void testClearCache_Failure() {
            String serverUrl = "http://localhost:8080";
            String clearCacheUrl = serverUrl + "/clear-cache";
            when(restTemplate.postForEntity(eq(clearCacheUrl), any(), eq(String.class))).thenReturn(new ResponseEntity<>("ERROR", HttpStatus.INTERNAL_SERVER_ERROR));
    
            boolean result = deepSeekCoderService.clearCache();
    
            assertFalse(result);
            verify(restTemplate, times(1)).postForEntity(eq(clearCacheUrl), any(), eq(String.class));
        }
    @Test
        void testClearCache_Exception() {
            String serverUrl = "http://localhost:8080";
            String clearCacheUrl = serverUrl + "/clear-cache";
            when(restTemplate.postForEntity(eq(clearCacheUrl), any(), eq(String.class))).thenThrow(new RuntimeException("Service unavailable"));
    
            boolean result = deepSeekCoderService.clearCache();
    
            assertFalse(result);
            verify(restTemplate, times(1)).postForEntity(eq(clearCacheUrl), any(), eq(String.class));
        }
//    @Test
//        void testGenerateTestAndSave_Success() throws IOException {
//            String sourceFilePath = "src/main/java/com/mpokket/testgenerator/service/DeepSeekCoderService.java";
//            Path sourcePath = Paths.get(sourceFilePath);
//            String javaCode = new String(Files.readAllBytes(sourcePath));
//            String className = extractClassName(javaCode);
//            String generatedTests = generateTestCases(javaCode, className);
//
//            String testFilePath = sourceFilePath.replace("src/main/java", "src/test/java").replace(".java", "Test.java");
//            Path testPath = Paths.get(testFilePath);
//            Files.createDirectories(testPath.getParent());
//            Files.write(testPath, generatedTests.getBytes(), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);
//
//            Map<String, String> result = deepSeekCoderService.generateTestAndSave(sourceFilePath);
//
//            assertNotNull(result);
//            assertEquals("src/test/java/com/mpokket/testgenerator/service/DeepSeekCoderServiceTest.java", result.get("testFilePath"));
//            assertEquals("Deepseek-Coder Multi-Model", result.get("modelUsed"));
//            verify(restTemplate, times(1)).postForEntity(anyString(), any(), eq(String.class));
//        }
    @Test
        void testGenerateTestAndSave_NullSourceFilePath() {
            String sourceFilePath = null;
            assertThrows(IOException.class, () -> deepSeekCoderService.generateTestAndSave(sourceFilePath));
        }
    @Test
        void testGenerateTestAndSave_EmptySourceFilePath() {
            String sourceFilePath = "";
            assertThrows(IOException.class, () -> deepSeekCoderService.generateTestAndSave(sourceFilePath));
        }
    @Test
        void testGenerateTestAndSave_FileNotFound() throws IOException {
            String sourceFilePath = "non/existent/path";
            assertThrows(IOException.class, () -> deepSeekCoderService.generateTestAndSave(sourceFilePath));
        }
}